'''
Q33 퇴사
상담원으로 일하고 있는 백준이는 퇴사를 하려고 합니다.
오늘부터 N + 1일째 되는 날 퇴사를 하기 위해서, 남은 N일 동안 최대한 많은 상담을 하려고 합니다.
백준이는 비서에게 최대한 많은 상담을 잡으라고 부탁을 했고, 비서는 하루에 하나씩 서로 다른 사람의 상담을 잡아놓았습니다.
각각의 상담은 상담을 완료하는데 걸리는 기간 T1와 상담을 했을 때 받을 수 있는 금액 P1로 이루어져 있습니다.

N = 7인 경우에 다음과 같은 상담 일정표가 있습니다.
    1일    2일    3일    4일    5일    6일    7일
T1  3      5     1      1     2     4     2
P1  10     20    10     20    15    20    200

1일에 잡혀 있는 상담은 총 3일이 걸리며, 상담했을 때 받을수 있는 금액은 10입니다.
5일에 잡혀 있는 상담은 총 2일이 걸리며, 받을 수 있는 금액은 15입니다.
상담하는 데 필요한 기간은 1일보다 클 수 있기 때문에, 모든 상담을 할 수는 없습니다.
예를 들어서 1일에 상담을 하게 되면, 2, 3일에 있는 상담은 할 수 없습니다. 
2일에 있는 상담을 하게 되면, 3, 4, 5, 6일에 잡혀 있는 상담을 할 수 없습니다.
또한 N + 1일째에는 회사에 없기 때문에, 6, 7일에 있는 상담을 할 수 없습니다.
퇴사 전에 할 수 있는 상담의 최대 이익은 1일, 4일, 5일에 있는 상담을 하는 것이며, 이때의 이익은 10 + 20 + 15 = 45입니다.
상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 수하는 프로그램을 작성하세요.

<입력 조건>
- 첫째 줄에 N(1 <= N <= 15)이 주어집니다.
- 둘째 줄부터 N개의 줄에 T1와 P1가 공백으로 구분되어 주어지며, 1일부터 N일까지 순서대로 주어집니다.
  (1 <= T1 <= 5, 1 <= P1 <= 1,000)

<출력 조건>
- 첫째 줄에 백준이가 얻을 수 있는 최대 이익을 출력합니다.

<입력 예시 1>
7
3 10
5 20
1 10
1 20
2 15
4 40
2 200

<출력 예시 1>
45

<입력 예시 2>
10
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10

<출력 예시 2>
55

<입력 예시 3>
10
5 10
5 9
5 8
5 7
5 6
5 10
5 9
5 8
5 7
5 6

<출력 예시 3>
20

<입력 예시 4>
10
5 50
4 40
3 30
2 20
1 10
1 10
2 20
3 30
4 40
5 50

<출력 예시 4>
90
'''

'''
점화식: dp[i] = max(p[i] + dp[t[i] + i], max_value)
'''

n = int(input()) # 전체 상담 개수
t = [] # 각 상담을 완료하는데 걸리는 기간
p = [] # 각 상담을 완료했을 때 받을 수 있는 금액
dp = [0] * (n + 1) # 다이나믹 프로그래밍을 위한 1차원 dp 테이블 초기화
max_value = 0

for _ in range(n):
    x, y = map(int, input().split())
    t.append(x)
    p.append(y)
    
# 리스트를 뒤에서부터 거꾸로 확인
for i in range(n - 1, -1, -1):
    time = t[i] + i
    # 상담이 기간 안에 끝나는 경우
    if time <= n:
        # 점화식에 맞게, 현재까지의 최고 이익 계산
        dp[i] = max(p[i] + dp[time], max_value)
        max_value = dp[i]
    # 상담이 기간을 벗어나는 경우
    else:
        dp[i] = max_value

print(max_value)